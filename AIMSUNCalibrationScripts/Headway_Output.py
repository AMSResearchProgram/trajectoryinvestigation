from AAPI import *import osfrom PyANGKernel import *from PyANGGui import *from PyANGBasic import *import sysrep_id = ANGConnGetReplicationId()repTypeAtt = ANGConnGetAttribute( AKIConvertFromAsciiString("GKReplication::dbIdAtt" ))rep_db_id = ANGConnGetAttributeValueInt( repTypeAtt, rep_id )simulation_output_filename =  "simulation_trajectory_" + str(rep_db_id) + ".csv"restricted_section_ids_filename = "restricted_sections_ids.csv" # this file contains one line with ids of sections to analyze : id1,id2,id3global outfileglobal restricted_section_idsdef AAPILoad():    return 0 def AAPIInit():    AKIPrintString("Initializing HEADWAY API....")    global outfile    # write the simulation_output to file        dir_path = os.path.dirname(os.path.realpath(__file__))    AKIPrintString("Writing to: " + str(dir_path))    outfilename = os.path.join(dir_path,simulation_output_filename)    AKIPrintString("Writing to: " + str(outfilename))    outfile = open(outfilename, 'w')    outfile.write("did,infVeh.idVeh,infVeh.type,infVeh.idSection,infVeh.numberLane,infVeh.xCurrentPos,infVeh.yCurrentPos,x_world,y_world,timeSta,infVeh.CurrentSpeed,infVeh.TotalDistance,headway\n")    outfile.flush()    # read the restricted section ids to output data from     global restricted_section_ids        infilename = os.path.join(dir_path,restricted_section_ids_filename)    infile = open(infilename, 'r')    restricted_section_ids = [int(section_id) for section_id in infile.readline().strip().split(',')]    AKIPrintString("Restring Headway analysis to ids : " + str(restricted_section_ids))    return 0def AAPIManage(time, timeSta, timeTrans, acycle):    gui = GKGUISystem.getGUISystem().getActiveGui()    model = gui.getActiveModel()    coord_translator = model.getGeoModel().getCoordinateTranslator()    global outfile    global restricted_section_ids        nba = AKIInfNetNbSectionsANG()    for i in range(nba):        id = AKIInfNetGetSectionANGId(i)        if id not in restricted_section_ids :            continue        nb = AKIVehStateGetNbVehiclesSection(id,True)        for j in range(nb):            infVeh = AKIVehStateGetVehicleInfSection(id,j)            leader_id = AKIVehGetLeaderId(infVeh.idVeh)            leaderVeh = AKIVehGetInf(leader_id)            follower_pos = infVeh.CurrentPos            follower_speed = infVeh.CurrentSpeed            p_initial = GKPoint(infVeh.xCurrentPos, infVeh.yCurrentPos)            p_converted = coord_translator.convert("EPSG:32611", "EPSG:4326", p_initial)            x_world = p_converted.x            y_world = p_converted.y            did = ANGConnGetReplicationId()            astring = str(did) + "," + str(infVeh.idVeh) + "," + str(infVeh.type) + "," + str(infVeh.idSection) + ',' + str(infVeh.numberLane)+ "," + str(infVeh.xCurrentPos) +"," + str(infVeh.yCurrentPos) + "," + str(x_world) + "," + str(y_world) + "," + str(timeSta) + "," + str(follower_speed) + "," + str(infVeh.TotalDistance) + ','            if leader_id <= 0 or (infVeh.idSection != leaderVeh.idSection):                headway = -1            else:                leader_pos = float(str(leaderVeh.CurrentPos))                #follower_pos = InfVeh.CurrentPos                distance = leader_pos - follower_pos # in meters                speed_m_s =  follower_speed / 3.6                if speed_m_s > 0:                    headway = distance / speed_m_s # in sec                else:                    headway = -1                astring += str(headway)            if not (headway == -1 or headway > 6 or timeSta < 53700 or timeSta > 64800 or (timeSta > 54900 and timeSta < 58800) or (timeSta > 60000 and timeSta < 63600)) : # another way to make the size of the file smaller                outfile.write(astring+'\n')    return 0    def AAPIPostManage(time, timeSta, timeTrans, acycle):    return 0def AAPIFinish():    global outfile    outfile.close()    AKIPrintString( "AAPIFinish" )    return 0def AAPIUnLoad():    AKIPrintString( "AAPIUnLoad" )    return 0    def AAPIPreRouteChoiceCalculation(time, timeSta):    return 0    def AAPIEnterVehicle(idveh, idsection):    return 0def AAPIExitVehicle(idveh, idsection):    return 0def AAPIEnterPedestrian(idPedestrian, originCentroid):    return 0def AAPIExitPedestrian(idPedestrian, destinationCentroid):    return 0def AAPIEnterVehicleSection(idveh, idsection, atime):    return 0def AAPIExitVehicleSection(idveh, idsection, atime):    return 0def AAPIVehicleStartParking(idveh, idsection, atime):    return 0